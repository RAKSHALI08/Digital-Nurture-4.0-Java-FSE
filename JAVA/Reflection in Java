import java.lang.reflect.Method;

public class ReflectionExample {
    public static void main(String[] args) throws Exception {
        Class<?> cls = Class.forName("Sample");
        Object obj = cls.getDeclaredConstructor().newInstance();

        Method[] methods = cls.getDeclaredMethods();

        System.out.println("Methods in class " + cls.getName() + ":");
        for (Method method : methods) {
            System.out.print(method.getName() + "(");
            Class<?>[] params = method.getParameterTypes();
            for (int i = 0; i < params.length; i++) {
                System.out.print(params[i].getSimpleName());
                if (i < params.length - 1) System.out.print(", ");
            }
            System.out.println(")");
        }

        Method sayHelloMethod = cls.getDeclaredMethod("sayHello");
        sayHelloMethod.invoke(obj);

        Method addMethod = cls.getDeclaredMethod("add", int.class, int.class);
        Object result = addMethod.invoke(obj, 5, 3);
        System.out.println("Result of add(5, 3): " + result);
    }
}

class Sample {
    public void sayHello() {
        System.out.println("Hello from Sample class!");
    }

    public int add(int a, int b) {
        return a + b;
    }
}



output
Methods in class Sample:
sayHello()
add(int, int)
Hello from Sample class!
Result of add(5, 3): 8
